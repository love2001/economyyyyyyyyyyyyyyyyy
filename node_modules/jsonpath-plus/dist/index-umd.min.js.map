{"version":3,"file":"index-umd.min.js","sources":["../src/jsonpath.js"],"sourcesContent":["/* eslint-disable prefer-named-capture-group */\n// Disabled `prefer-named-capture-group` due to https://github.com/babel/babel/issues/8951#issuecomment-508045524\n// Only Node.JS has a process variable that is of [[Class]] process\nconst supportsNodeVM = function () {\n    try {\n        return Object.prototype.toString.call(\n            global.process\n        ) === '[object process]';\n    } catch (e) {\n        return false;\n    }\n};\nconst allowedResultTypes = [\n    'value', 'path', 'pointer', 'parent', 'parentProperty', 'all'\n];\nconst {hasOwnProperty: hasOwnProp} = Object.prototype;\n\n/**\n* @typedef {null|boolean|number|string|PlainObject|GenericArray} JSONObject\n*/\n\n/**\n* @callback ConditionCallback\n* @param item\n* @returns {boolean}\n*/\n\n/**\n * Copy items out of one array into another.\n * @param {GenericArray} source Array with items to copy\n * @param {GenericArray} target Array to which to copy\n * @param {ConditionCallback} conditionCb Callback passed the current item;\n *     will move item if evaluates to `true`\n * @returns {undefined}\n */\nconst moveToAnotherArray = function (source, target, conditionCb) {\n    const il = source.length;\n    for (let i = 0; i < il; i++) {\n        const item = source[i];\n        if (conditionCb(item)) {\n            target.push(source.splice(i--, 1)[0]);\n        }\n    }\n};\n\nconst vm = supportsNodeVM()\n    ? require('vm')\n    : {\n        /**\n         * @param {string} expr Expression to evaluate\n         * @param {PlainObject} context Object whose items will be added\n         *   to evaluation\n         * @returns {any} Result of evaluated code\n         */\n        runInNewContext (expr, context) {\n            const keys = Object.keys(context);\n            const funcs = [];\n            moveToAnotherArray(keys, funcs, (key) => {\n                return typeof context[key] === 'function';\n            });\n            // Todo[engine:node@>=8]: Use the next line instead of the\n            //  succeeding\n            // const values = Object.values(context);\n            const values = keys.map((vr, i) => {\n                return context[vr];\n            });\n            const funcString = funcs.reduce((s, func) => {\n                let fString = context[func].toString();\n                if (!(/function/u).exec(fString)) {\n                    fString = 'function ' + fString;\n                }\n                return 'var ' + func + '=' + fString + ';' + s;\n            }, '');\n\n            expr = funcString + expr;\n\n            // Mitigate http://perfectionkills.com/global-eval-what-are-the-options/#new_function\n            if (!expr.match(/(['\"])use strict\\1/u) &&\n                !keys.includes('arguments')\n            ) {\n                expr = 'var arguments = undefined;' + expr;\n            }\n\n            // Remove last semi so `return` will be inserted before\n            //  the previous one instead, allowing for the return\n            //  of a bare ending expression\n            expr = expr.replace(/;\\s*$/u, '');\n\n            // Insert `return`\n            const lastStatementEnd = expr.lastIndexOf(';');\n            const code = (lastStatementEnd > -1\n                ? expr.slice(0, lastStatementEnd + 1) +\n                    ' return ' + expr.slice(lastStatementEnd + 1)\n                : ' return ' + expr);\n\n            // eslint-disable-next-line no-new-func\n            return (new Function(...keys, code))(...values);\n        }\n    };\n\n/**\n * Copies array and then pushes item into it.\n * @param {GenericArray} arr Array to copy and into which to push\n * @param {any} item Array item to add (to end)\n * @returns {GenericArray} Copy of the original array\n */\nfunction push (arr, item) {\n    arr = arr.slice();\n    arr.push(item);\n    return arr;\n}\n/**\n * Copies array and then unshifts item into it.\n * @param {any} item Array item to add (to beginning)\n * @param {GenericArray} arr Array to copy and into which to unshift\n * @returns {GenericArray} Copy of the original array\n */\nfunction unshift (item, arr) {\n    arr = arr.slice();\n    arr.unshift(item);\n    return arr;\n}\n\n/**\n * Caught when JSONPath is used without `new` but rethrown if with `new`\n * @extends Error\n */\nclass NewError extends Error {\n    /**\n     * @param {any} value The evaluated scalar value\n     */\n    constructor (value) {\n        super(\n            'JSONPath should not be called with \"new\" (it prevents return ' +\n            'of (unwrapped) scalar values)'\n        );\n        this.avoidNew = true;\n        this.value = value;\n        this.name = 'NewError';\n    }\n}\n\n/**\n* @typedef {PlainObject} ReturnObject\n* @property {string} path\n* @property {JSONObject} value\n* @property {PlainObject|GenericArray} parent\n* @property {string} parentProperty\n*/\n\n/**\n* @callback JSONPathCallback\n* @param {string|PlainObject} preferredOutput\n* @param {\"value\"|\"property\"} type\n* @param {ReturnObject} fullRetObj\n* @returns {void}\n*/\n\n/**\n* @callback OtherTypeCallback\n* @param {JSONObject} val\n* @param {string} path\n* @param {PlainObject|GenericArray} parent\n* @param {string} parentPropName\n* @returns {boolean}\n*/\n\n/**\n * @typedef {PlainObject} JSONPathOptions\n * @property {JSON} json\n * @property {string|string[]} path\n * @property {\"value\"|\"path\"|\"pointer\"|\"parent\"|\"parentProperty\"|\"all\"}\n *   [resultType=\"value\"]\n * @property {boolean} [flatten=false]\n * @property {boolean} [wrap=true]\n * @property {PlainObject} [sandbox={}]\n * @property {boolean} [preventEval=false]\n * @property {PlainObject|GenericArray|null} [parent=null]\n * @property {string|null} [parentProperty=null]\n * @property {JSONPathCallback} [callback]\n * @property {OtherTypeCallback} [otherTypeCallback] Defaults to\n *   function which throws on encountering `@other`\n * @property {boolean} [autostart=true]\n */\n\n/**\n * @param {string|JSONPathOptions} opts If a string, will be treated as `expr`\n * @param {string} [expr] JSON path to evaluate\n * @param {JSON} [obj] JSON object to evaluate against\n * @param {JSONPathCallback} [callback] Passed 3 arguments: 1) desired payload\n *     per `resultType`, 2) `\"value\"|\"property\"`, 3) Full returned object with\n *     all payloads\n * @param {OtherTypeCallback} [otherTypeCallback] If `@other()` is at the end\n *   of one's query, this will be invoked with the value of the item, its\n *   path, its parent, and its parent's property name, and it should return\n *   a boolean indicating whether the supplied value belongs to the \"other\"\n *   type or not (or it may handle transformations and return `false`).\n * @returns {JSONPath}\n * @class\n */\nfunction JSONPath (opts, expr, obj, callback, otherTypeCallback) {\n    // eslint-disable-next-line no-restricted-syntax\n    if (!(this instanceof JSONPath)) {\n        try {\n            return new JSONPath(opts, expr, obj, callback, otherTypeCallback);\n        } catch (e) {\n            if (!e.avoidNew) {\n                throw e;\n            }\n            return e.value;\n        }\n    }\n\n    if (typeof opts === 'string') {\n        otherTypeCallback = callback;\n        callback = obj;\n        obj = expr;\n        expr = opts;\n        opts = null;\n    }\n    const optObj = opts && typeof opts === 'object';\n    opts = opts || {};\n    this.json = opts.json || obj;\n    this.path = opts.path || expr;\n    this.resultType = (opts.resultType && opts.resultType.toLowerCase()) ||\n        'value';\n    this.flatten = opts.flatten || false;\n    this.wrap = hasOwnProp.call(opts, 'wrap') ? opts.wrap : true;\n    this.sandbox = opts.sandbox || {};\n    this.preventEval = opts.preventEval || false;\n    this.parent = opts.parent || null;\n    this.parentProperty = opts.parentProperty || null;\n    this.callback = opts.callback || callback || null;\n    this.otherTypeCallback = opts.otherTypeCallback ||\n        otherTypeCallback ||\n        function () {\n            throw new TypeError(\n                'You must supply an otherTypeCallback callback option ' +\n                'with the @other() operator.'\n            );\n        };\n\n    if (opts.autostart !== false) {\n        const args = {\n            path: (optObj ? opts.path : expr)\n        };\n        if (!optObj) {\n            args.json = obj;\n        } else if ('json' in opts) {\n            args.json = opts.json;\n        }\n        const ret = this.evaluate(args);\n        if (!ret || typeof ret !== 'object') {\n            throw new NewError(ret);\n        }\n        return ret;\n    }\n}\n\n// PUBLIC METHODS\nJSONPath.prototype.evaluate = function (\n    expr, json, callback, otherTypeCallback\n) {\n    const that = this;\n    let currParent = this.parent,\n        currParentProperty = this.parentProperty;\n    let {flatten, wrap} = this;\n\n    this.currResultType = this.resultType;\n    this.currPreventEval = this.preventEval;\n    this.currSandbox = this.sandbox;\n    callback = callback || this.callback;\n    this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;\n\n    json = json || this.json;\n    expr = expr || this.path;\n    if (expr && typeof expr === 'object') {\n        if (!expr.path) {\n            throw new TypeError(\n                'You must supply a \"path\" property when providing an object ' +\n                'argument to JSONPath.evaluate().'\n            );\n        }\n        if (!('json' in expr)) {\n            throw new TypeError(\n                'You must supply a \"json\" property when providing an object ' +\n                'argument to JSONPath.evaluate().'\n            );\n        }\n        json = hasOwnProp.call(expr, 'json') ? expr.json : json;\n        flatten = hasOwnProp.call(expr, 'flatten') ? expr.flatten : flatten;\n        this.currResultType = hasOwnProp.call(expr, 'resultType')\n            ? expr.resultType\n            : this.currResultType;\n        this.currSandbox = hasOwnProp.call(expr, 'sandbox')\n            ? expr.sandbox\n            : this.currSandbox;\n        wrap = hasOwnProp.call(expr, 'wrap') ? expr.wrap : wrap;\n        this.currPreventEval = hasOwnProp.call(expr, 'preventEval')\n            ? expr.preventEval\n            : this.currPreventEval;\n        callback = hasOwnProp.call(expr, 'callback') ? expr.callback : callback;\n        this.currOtherTypeCallback = hasOwnProp.call(expr, 'otherTypeCallback')\n            ? expr.otherTypeCallback\n            : this.currOtherTypeCallback;\n        currParent = hasOwnProp.call(expr, 'parent') ? expr.parent : currParent;\n        currParentProperty = hasOwnProp.call(expr, 'parentProperty')\n            ? expr.parentProperty\n            : currParentProperty;\n        expr = expr.path;\n    }\n    currParent = currParent || null;\n    currParentProperty = currParentProperty || null;\n\n    if (Array.isArray(expr)) {\n        expr = JSONPath.toPathString(expr);\n    }\n    if (!expr || !json || !allowedResultTypes.includes(this.currResultType)) {\n        return undefined;\n    }\n    this._obj = json;\n\n    const exprList = JSONPath.toPathArray(expr);\n    if (exprList[0] === '$' && exprList.length > 1) { exprList.shift(); }\n    this._hasParentSelector = null;\n    const result = this\n        ._trace(exprList, json, ['$'], currParent, currParentProperty, callback)\n        .filter(function (ea) { return ea && !ea.isParentSelector; });\n\n    if (!result.length) { return wrap ? [] : undefined; }\n    if (result.length === 1 && !wrap && !Array.isArray(result[0].value)) {\n        return this._getPreferredOutput(result[0]);\n    }\n    return result.reduce(function (rslt, ea) {\n        const valOrPath = that._getPreferredOutput(ea);\n        if (flatten && Array.isArray(valOrPath)) {\n            rslt = rslt.concat(valOrPath);\n        } else {\n            rslt.push(valOrPath);\n        }\n        return rslt;\n    }, []);\n};\n\n// PRIVATE METHODS\n\nJSONPath.prototype._getPreferredOutput = function (ea) {\n    const resultType = this.currResultType;\n    switch (resultType) {\n    default:\n        throw new TypeError('Unknown result type');\n    case 'all':\n        ea.pointer = JSONPath.toPointer(ea.path);\n        ea.path = typeof ea.path === 'string'\n            ? ea.path\n            : JSONPath.toPathString(ea.path);\n        return ea;\n    case 'value': case 'parent': case 'parentProperty':\n        return ea[resultType];\n    case 'path':\n        return JSONPath.toPathString(ea[resultType]);\n    case 'pointer':\n        return JSONPath.toPointer(ea.path);\n    }\n};\n\nJSONPath.prototype._handleCallback = function (fullRetObj, callback, type) {\n    if (callback) {\n        const preferredOutput = this._getPreferredOutput(fullRetObj);\n        fullRetObj.path = typeof fullRetObj.path === 'string'\n            ? fullRetObj.path\n            : JSONPath.toPathString(fullRetObj.path);\n        // eslint-disable-next-line callback-return\n        callback(preferredOutput, type, fullRetObj);\n    }\n};\n\n/**\n *\n * @param {string} expr\n * @param {JSONObject} val\n * @param {string} path\n * @param {PlainObject|GenericArray} parent\n * @param {string} parentPropName\n * @param {JSONPathCallback} callback\n * @param {boolean} literalPriority\n * @returns {ReturnObject|ReturnObject[]}\n */\nJSONPath.prototype._trace = function (\n    expr, val, path, parent, parentPropName, callback, literalPriority\n) {\n    // No expr to follow? return path and value as the result of\n    //  this trace branch\n    let retObj;\n    const that = this;\n    if (!expr.length) {\n        retObj = {path, value: val, parent, parentProperty: parentPropName};\n        this._handleCallback(retObj, callback, 'value');\n        return retObj;\n    }\n\n    const loc = expr[0], x = expr.slice(1);\n\n    // We need to gather the return value of recursive trace calls in order to\n    // do the parent sel computation.\n    const ret = [];\n    /**\n     *\n     * @param {ReturnObject|ReturnObject[]} elems\n     * @returns {void}\n     */\n    function addRet (elems) {\n        if (Array.isArray(elems)) {\n            // This was causing excessive stack size in Node (with or\n            //  without Babel) against our performance test:\n            //  `ret.push(...elems);`\n            elems.forEach((t) => {\n                ret.push(t);\n            });\n        } else {\n            ret.push(elems);\n        }\n    }\n\n    if ((typeof loc !== 'string' || literalPriority) && val &&\n        hasOwnProp.call(val, loc)\n    ) { // simple case--directly follow property\n        addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback));\n    } else if (loc === '*') { // all child properties\n        this._walk(\n            loc, x, val, path, parent, parentPropName, callback,\n            function (m, l, _x, v, p, par, pr, cb) {\n                addRet(that._trace(unshift(m, _x), v, p, par, pr, cb, true));\n            }\n        );\n    } else if (loc === '..') { // all descendent parent properties\n        // Check remaining expression with val's immediate children\n        addRet(\n            this._trace(x, val, path, parent, parentPropName, callback)\n        );\n        this._walk(\n            loc, x, val, path, parent, parentPropName, callback,\n            function (m, l, _x, v, p, par, pr, cb) {\n                // We don't join m and x here because we only want parents,\n                //   not scalar values\n                if (typeof v[m] === 'object') {\n                    // Keep going with recursive descent on val's\n                    //   object children\n                    addRet(that._trace(\n                        unshift(l, _x), v[m], push(p, m), v, m, cb\n                    ));\n                }\n            }\n        );\n    // The parent sel computation is handled in the frame above using the\n    // ancestor object of val\n    } else if (loc === '^') {\n        // This is not a final endpoint, so we do not invoke the callback here\n        this._hasParentSelector = true;\n        return path.length\n            ? {\n                path: path.slice(0, -1),\n                expr: x,\n                isParentSelector: true\n            }\n            : [];\n    } else if (loc === '~') { // property name\n        retObj = {\n            path: push(path, loc),\n            value: parentPropName,\n            parent,\n            parentProperty: null\n        };\n        this._handleCallback(retObj, callback, 'property');\n        return retObj;\n    } else if (loc === '$') { // root only\n        addRet(this._trace(x, val, path, null, null, callback));\n    } else if ((/^(-?\\d*):(-?\\d*):?(\\d*)$/u).test(loc)) { // [start:end:step]  Python slice syntax\n        addRet(\n            this._slice(loc, x, val, path, parent, parentPropName, callback)\n        );\n    } else if (loc.indexOf('?(') === 0) { // [?(expr)] (filtering)\n        if (this.currPreventEval) {\n            throw new Error('Eval [?(expr)] prevented in JSONPath expression.');\n        }\n        this._walk(\n            loc, x, val, path, parent, parentPropName, callback,\n            function (m, l, _x, v, p, par, pr, cb) {\n                if (that._eval(l.replace(/^\\?\\((.*?)\\)$/u, '$1'), v[m], m, p, par, pr)) {\n                    addRet(that._trace(unshift(m, _x), v, p, par, pr, cb));\n                }\n            }\n        );\n    } else if (loc[0] === '(') { // [(expr)] (dynamic property/index)\n        if (this.currPreventEval) {\n            throw new Error('Eval [(expr)] prevented in JSONPath expression.');\n        }\n        // As this will resolve to a property name (but we don't know it\n        //  yet), property and parent information is relative to the\n        //  parent of the property to which this expression will resolve\n        addRet(this._trace(unshift(\n            this._eval(\n                loc, val, path[path.length - 1],\n                path.slice(0, -1), parent, parentPropName\n            ),\n            x\n        ), val, path, parent, parentPropName, callback));\n    } else if (loc[0] === '@') { // value type: @boolean(), etc.\n        let addType = false;\n        const valueType = loc.slice(1, -2);\n        switch (valueType) {\n        default:\n            throw new TypeError('Unknown value type ' + valueType);\n        case 'scalar':\n            if (!val || !(['object', 'function'].includes(typeof val))) {\n                addType = true;\n            }\n            break;\n        case 'boolean': case 'string': case 'undefined': case 'function':\n            // eslint-disable-next-line valid-typeof\n            if (typeof val === valueType) {\n                addType = true;\n            }\n            break;\n        case 'number':\n            // eslint-disable-next-line valid-typeof\n            if (typeof val === valueType && isFinite(val)) {\n                addType = true;\n            }\n            break;\n        case 'nonFinite':\n            if (typeof val === 'number' && !isFinite(val)) {\n                addType = true;\n            }\n            break;\n        case 'object':\n            // eslint-disable-next-line valid-typeof\n            if (val && typeof val === valueType) {\n                addType = true;\n            }\n            break;\n        case 'array':\n            if (Array.isArray(val)) {\n                addType = true;\n            }\n            break;\n        case 'other':\n            addType = this.currOtherTypeCallback(\n                val, path, parent, parentPropName\n            );\n            break;\n        case 'integer':\n            if (val === Number(val) && isFinite(val) && !(val % 1)) {\n                addType = true;\n            }\n            break;\n        case 'null':\n            if (val === null) {\n                addType = true;\n            }\n            break;\n        }\n        if (addType) {\n            retObj = {path, value: val, parent, parentProperty: parentPropName};\n            this._handleCallback(retObj, callback, 'value');\n            return retObj;\n        }\n    // `-escaped property\n    } else if (loc[0] === '`' && val && hasOwnProp.call(val, loc.slice(1))) {\n        const locProp = loc.slice(1);\n        addRet(this._trace(\n            x, val[locProp], push(path, locProp), val, locProp, callback, true\n        ));\n    } else if (loc.includes(',')) { // [name1,name2,...]\n        const parts = loc.split(',');\n        for (const part of parts) {\n            addRet(this._trace(\n                unshift(part, x), val, path, parent, parentPropName, callback\n            ));\n        }\n    // simple case--directly follow property\n    } else if (!literalPriority && val && hasOwnProp.call(val, loc)) {\n        addRet(\n            this._trace(x, val[loc], push(path, loc), val, loc, callback, true)\n        );\n    }\n\n    // We check the resulting values for parent selections. For parent\n    // selections we discard the value object and continue the trace with the\n    // current val object\n    if (this._hasParentSelector) {\n        for (let t = 0; t < ret.length; t++) {\n            const rett = ret[t];\n            if (rett.isParentSelector) {\n                const tmp = that._trace(\n                    rett.expr, val, rett.path, parent, parentPropName, callback\n                );\n                if (Array.isArray(tmp)) {\n                    ret[t] = tmp[0];\n                    const tl = tmp.length;\n                    for (let tt = 1; tt < tl; tt++) {\n                        t++;\n                        ret.splice(t, 0, tmp[tt]);\n                    }\n                } else {\n                    ret[t] = tmp;\n                }\n            }\n        }\n    }\n    return ret;\n};\n\nJSONPath.prototype._walk = function (\n    loc, expr, val, path, parent, parentPropName, callback, f\n) {\n    if (Array.isArray(val)) {\n        const n = val.length;\n        for (let i = 0; i < n; i++) {\n            f(i, loc, expr, val, path, parent, parentPropName, callback);\n        }\n    } else if (typeof val === 'object') {\n        for (const m in val) {\n            if (hasOwnProp.call(val, m)) {\n                f(m, loc, expr, val, path, parent, parentPropName, callback);\n            }\n        }\n    }\n};\n\nJSONPath.prototype._slice = function (\n    loc, expr, val, path, parent, parentPropName, callback\n) {\n    if (!Array.isArray(val)) { return undefined; }\n    const len = val.length, parts = loc.split(':'),\n        step = (parts[2] && parseInt(parts[2])) || 1;\n    let start = (parts[0] && parseInt(parts[0])) || 0,\n        end = (parts[1] && parseInt(parts[1])) || len;\n    start = (start < 0) ? Math.max(0, start + len) : Math.min(len, start);\n    end = (end < 0) ? Math.max(0, end + len) : Math.min(len, end);\n    const ret = [];\n    for (let i = start; i < end; i += step) {\n        const tmp = this._trace(\n            unshift(i, expr), val, path, parent, parentPropName, callback\n        );\n        if (Array.isArray(tmp)) {\n            // This was causing excessive stack size in Node (with or\n            //  without Babel) against our performance test: `ret.push(...tmp);`\n            tmp.forEach((t) => {\n                ret.push(t);\n            });\n        } else {\n            ret.push(tmp);\n        }\n    }\n    return ret;\n};\n\nJSONPath.prototype._eval = function (\n    code, _v, _vname, path, parent, parentPropName\n) {\n    if (!this._obj || !_v) { return false; }\n    if (code.includes('@parentProperty')) {\n        this.currSandbox._$_parentProperty = parentPropName;\n        code = code.replace(/@parentProperty/gu, '_$_parentProperty');\n    }\n    if (code.includes('@parent')) {\n        this.currSandbox._$_parent = parent;\n        code = code.replace(/@parent/gu, '_$_parent');\n    }\n    if (code.includes('@property')) {\n        this.currSandbox._$_property = _vname;\n        code = code.replace(/@property/gu, '_$_property');\n    }\n    if (code.includes('@path')) {\n        this.currSandbox._$_path = JSONPath.toPathString(path.concat([_vname]));\n        code = code.replace(/@path/gu, '_$_path');\n    }\n    if (code.includes('@root')) {\n        this.currSandbox._$_root = this.json;\n        code = code.replace(/@root/gu, '_$_root');\n    }\n    if (code.match(/@([.\\s)[])/u)) {\n        this.currSandbox._$_v = _v;\n        code = code.replace(/@([.\\s)[])/gu, '_$_v$1');\n    }\n    try {\n        return vm.runInNewContext(code, this.currSandbox);\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(e);\n        throw new Error('jsonPath: ' + e.message + ': ' + code);\n    }\n};\n\n// PUBLIC CLASS PROPERTIES AND METHODS\n\n// Could store the cache object itself\nJSONPath.cache = {};\n\n/**\n * @param {string[]} pathArr Array to convert\n * @returns {string} The path string\n */\nJSONPath.toPathString = function (pathArr) {\n    const x = pathArr, n = x.length;\n    let p = '$';\n    for (let i = 1; i < n; i++) {\n        if (!(/^(~|\\^|@.*?\\(\\))$/u).test(x[i])) {\n            p += (/^[0-9*]+$/u).test(x[i]) ? ('[' + x[i] + ']') : (\"['\" + x[i] + \"']\");\n        }\n    }\n    return p;\n};\n\n/**\n * @param {string} pointer JSON Path\n * @returns {string} JSON Pointer\n */\nJSONPath.toPointer = function (pointer) {\n    const x = pointer, n = x.length;\n    let p = '';\n    for (let i = 1; i < n; i++) {\n        if (!(/^(~|\\^|@.*?\\(\\))$/u).test(x[i])) {\n            p += '/' + x[i].toString()\n                .replace(/~/gu, '~0')\n                .replace(/\\//gu, '~1');\n        }\n    }\n    return p;\n};\n\n/**\n * @param {string} expr Expression to convert\n * @returns {string[]}\n */\nJSONPath.toPathArray = function (expr) {\n    const {cache} = JSONPath;\n    if (cache[expr]) { return cache[expr].concat(); }\n    const subx = [];\n    const normalized = expr\n        // Properties\n        .replace(\n            /@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\\(\\)/gu,\n            ';$&;'\n        )\n        // Parenthetical evaluations (filtering and otherwise), directly\n        //   within brackets or single quotes\n        .replace(/[['](\\??\\(.*?\\))[\\]']/gu, function ($0, $1) {\n            return '[#' + (subx.push($1) - 1) + ']';\n        })\n        // Escape periods and tildes within properties\n        .replace(/\\['([^'\\]]*)'\\]/gu, function ($0, prop) {\n            return \"['\" + prop\n                .replace(/\\./gu, '%@%')\n                .replace(/~/gu, '%%@@%%') +\n                \"']\";\n        })\n        // Properties operator\n        .replace(/~/gu, ';~;')\n        // Split by property boundaries\n        .replace(/'?\\.'?(?![^[]*\\])|\\['?/gu, ';')\n        // Reinsert periods within properties\n        .replace(/%@%/gu, '.')\n        // Reinsert tildes within properties\n        .replace(/%%@@%%/gu, '~')\n        // Parent\n        .replace(/(?:;)?(\\^+)(?:;)?/gu, function ($0, ups) {\n            return ';' + ups.split('').join(';') + ';';\n        })\n        // Descendents\n        .replace(/;;;|;;/gu, ';..;')\n        // Remove trailing\n        .replace(/;$|'?\\]|'$/gu, '');\n\n    const exprList = normalized.split(';').map(function (exp) {\n        const match = exp.match(/#(\\d+)/u);\n        return !match || !match[1] ? exp : subx[match[1]];\n    });\n    cache[expr] = exprList;\n    return cache[expr];\n};\n\nexport {JSONPath};\n"],"names":["allowedResultTypes","hasOwnProp","Object","prototype","hasOwnProperty","vm","toString","call","global","process","e","supportsNodeVM","require","runInNewContext","expr","context","keys","funcs","source","target","conditionCb","il","length","i","push","splice","moveToAnotherArray","key","values","map","vr","reduce","s","func","fString","exec","match","includes","lastStatementEnd","replace","lastIndexOf","code","slice","_construct","Function","arr","item","unshift","NewError","value","avoidNew","name","Error","JSONPath","opts","obj","callback","otherTypeCallback","this","optObj","_typeof","json","path","resultType","toLowerCase","flatten","wrap","sandbox","preventEval","parent","parentProperty","TypeError","autostart","args","ret","evaluate","that","currParent","currParentProperty","currResultType","currPreventEval","currSandbox","currOtherTypeCallback","Array","isArray","toPathString","_obj","exprList","toPathArray","shift","_hasParentSelector","result","_trace","filter","ea","isParentSelector","rslt","valOrPath","_getPreferredOutput","concat","undefined","pointer","toPointer","_handleCallback","fullRetObj","type","preferredOutput","val","parentPropName","literalPriority","retObj","loc","x","addRet","elems","forEach","t","_walk","m","l","_x","v","p","par","pr","cb","test","_slice","indexOf","_eval","addType","valueType","isFinite","Number","locProp","parts","split","part","rett","tmp","tl","tt","f","n","len","step","parseInt","start","end","Math","max","min","_v","_vname","_$_parentProperty","_$_parent","_$_property","_$_path","_$_root","_$_v","console","log","message","cache","pathArr","subx","$0","$1","prop","ups","join","exp"],"mappings":"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"}